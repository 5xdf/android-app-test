name: test

on: [push]

env:
  WORKING_DIR: template

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache
        uses: actions/cache@v1
        with:
          path: ~/${{ env.WORKING_DIR }}/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build debug APK
        working-directory: ${{ env.WORKING_DIR }}
        run: ./gradlew assembleDebug

      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIR }}
        run: ./gradlew testDebug

      - name: Upload Unit Test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v1
        with:
          name: tests-results
          path: ${{ env.WORKING_DIR }}/androidApp/build/reports/tests/testDebugUnitTest/

#      - name: Build androidTest APK
#        run: ./gradlew :app:assembleDebugAndroidTest
#
#      - name: Install Google Cloud
#        run: |
#          sudo echo ${{ secrets.GCLOUD_AUTH }} | base64 --decode > gcloud-service-key.json
#          sudo gcloud auth activate-service-account --key-file=gcloud-service-key.json
#          sudo gcloud --quiet config set project ${{ secrets.GOOGLE_PROJECT_ID }}
#      - name: Run instrumentation tests with Firebase Test Lab
#        run: |
#          sudo gcloud firebase test android run \
#            --app app/build/outputs/apk/debug/app-debug.apk \
#            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
#            --device model=flame,version=29,locale=en,orientation=portrait \
#            --directories-to-pull /sdcard \
#            --environment-variables coverage=true,coverageFile="/sdcard/coverage.ec" \
#            --results-bucket cloud-test-${{ secrets.GOOGLE_PROJECT_ID }}
#      - name: Setup python
#        uses: actions/setup-python@v1
#        with:
#          python-version: '3.x'
#          architecture: 'x64'
#
#      - name: Download test results data
#        run: |
#          pip install -U crcmod
#          mkdir app/test_results
#          sudo gsutil -m cp -r -U `sudo gsutil ls gs://cloud-test-${{ secrets.GOOGLE_PROJECT_ID }} | tail -1` app/test_results/ | true
#      - name: Generate code coverage report
#        run: ./gradlew jacocoAndroidTestReport -PcodeCoverageDataLocation=test_results
#
#      - uses: codecov/codecov-action@v1.0.3
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: androidApp/build/reports/coverage.xml
#
#      - name: Upload code coverage reports
#        uses: actions/upload-artifact@v1
#        with:
#          name: code-coverage
#          path: androidApp/build/reports/